pi <- read.csv("C:/Users/zhlcb/OneDrive/Desktop/MATH 183_working directory/pi.csv", sep="")
View(pi)
e <- read.csv("C:/Users/zhlcb/OneDrive/Desktop/MATH 183_working directory/e.csv", sep="")
View(e)
# R
length(pi)
# R
nrows(pi)
# R
nrows(pi$digits)
# R
length(pi$digits)
length(e$digits)
?sample
# R
sample(pi$digits, size = 400, replace = F, prob = NULL)
# R
s_p <- sample(pi$digits, size = 400, replace = F, prob = NULL)
d
s_e <- sample(e$digits, size = 400, replace = F, prob = NULL)
?t.test
t.test(s_p,
s_e,
alternative = "two.sided",
mu = mean(s_p) - mean(s_e),
paired = T)
# manually check answer
mean_p <- mean(s_p)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
mean_e <- mean(s_e)
n_p <- length(s_p)
se <- sqrt((sd_1)^2 / 400, (sd_2)^2 / 400)
se <- sqrt((sd_1)^2 / 400 +(sd_2)^2 / 400)
t <- (mean_p - mean_e) / se
2.6076e-15
pt(t, 399, lower.tail = F)
t_1 <- c(100, 58.6, 93.5, 83.6, 84.1)
n_1 <- length(t_1)
mean_1 <- mean(t_1)
sd_1 <- sd(t_1)
t_2 <- c(76.4, 84.2, 96.5, 88.8, 85.3, 79.1, 83.6)
n_2 <- length(t_2)
mean_2 <- mean(t_2)
sd_2 <- sd(t_2)
df <- min(n_1 - 1, n_2 - 1)
se <- sqrt((sd_1)^2 / n_1 + (sd_2)^2 / n_2)
t <- (mean_1 - mean_2) / se
t
t_1 <- c(100, 58.6, 93.5, 83.6, 84.1)
n_1 <- length(t_1)
mean_1 <- mean(t_1)
sd_1 <- sd(t_1)
t_2 <- c(76.4, 84.2, 96.5, 88.8, 85.3, 79.1, 83.6)
n_2 <- length(t_2)
mean_2 <- mean(t_2)
sd_2 <- sd(t_2)
df <- min(n_1 - 1, n_2 - 1)
se <- sqrt((sd_1)^2 / n_1 + (sd_2)^2 / n_2)
t <- (mean_1 - mean_2) / se
t
2 * pt(-t, df = df) # 0.5442232
2 * pt(t, df = df) # 0.5442232
2 * pt(t, df) # 0.9115537
2 * pt(t, 399, lower.tail = F)
t.test(s_p,
s_e,
alternative = "two.sided",
mu = mean(s_p) - mean(s_e),
paired = TRUE,
conf.level = 0.99)
# manually check answer
mean_p <- mean(s_p)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_1)^2 / 400 +(sd_2)^2 / 400)
t <- (mean_p - mean_e) / se
2 * pt(t, 399, lower.tail = F)
2 * pt(t, 399)
s_p <- sample(pi$digits, size = 400, replace = F, prob = NULL)
s_e <- sample(e$digits, size = 400, replace = F, prob = NULL)
t.test(s_p,
s_e,
alternative = "two.sided",
mu = mean(s_p) - mean(s_e),
paired = TRUE,
conf.level = 0.99)
t.test(s_p,
s_e,
alternative = "two.sided",
mu = mean(s_p) - mean(s_e),
paired = FALSE,
conf.level = 0.99)
t.test(s_p,
s_e,
# alternative = "two.sided",
mu = mean(s_p) - mean(s_e),
paired = TRUE,
conf.level = 0.99)
t.test(s_p,
s_e,
alternative = "two.sided",
mu = mean(s_E) - mean(s_P),
paired = TRUE,
conf.level = 0.99)
t.test(s_p,
s_e,
alternative = "two.sided",
mu = mean(s_e) - mean(s_p),
paired = TRUE,
conf.level = 0.99)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_p)^2 / 400 +(sd_p)^2 / 400)
t <- (mean_p - mean_e) / se
2 * pt(t, 399)
s_p <- sample(pi$digits, size = 400, replace = F, prob = NULL)
s_e <- sample(e$digits, size = 400, replace = F, prob = NULL)
t.test(s_p,
s_e,
alternative = "two.sided",
mu = mean(s_p) - mean(s_e),
paired = TRUE,
conf.level = 0.99)
# R
s_p <- sample(pi$digits, size = 400, replace = F, prob = NULL)
s_e <- sample(e$digits, size = 400, replace = F, prob = NULL)
t.test(s_p,
s_e,
# alternative = "two.sided",
mu = mean(s_p) - mean(s_e),
paired = TRUE,
conf.level = 0.99)
t.test(s_p,
s_e,
# alternative = "two.sided",
mu = mean(s_p) - mean(s_e),
paired = TRUE)
t.test(s_p,
s_e,
alternative = "two.sided",
mu = mean(s_e) - mean(s_p),
paired = TRUE,
conf.level = 0.99)
# t.test(Control,Treat,alternative="less", var.equal = TRUE)
# manually check answer
mean_p <- mean(s_p)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_p)^2 / 400 +(sd_p)^2 / 400)
t <- (mean_p - mean_e) / se
pt(t, 399)
# t.test(Control,Treat,alternative="less", var.equal = TRUE)
# manually check answer
mean_p <- mean(s_p)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_p)^2 / 400 +(sd_p)^2 / 400)
t <- (mean_e - mean_p) / se
pt(t, 399)
mean_p <- mean(s_p)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_p)^2 / 400 +(sd_p)^2 / 400)
t <- (mean_p - mean_e) / se
pt(t, 399)
mean_p <- mean(s_p)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_p)^2 / 400 +(sd_e)^2 / 400)
t <- (mean_e - mean_p) / se
2 * pt(t, 399)
mean_p <- mean(s_p)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_p)^2 / 400 +(sd_e)^2 / 400)
t <- (mean_p - mean_e) / se
2 * pt(t, 399)
mean_p <- mean(s_p)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_p)^2 / 400 +(sd_e)^2 / 400)
t <- (mean_e - mean_p) / se
pt(t, 399)
2 * pt(t, 399)
mean_p <- mean(s_p)
mean_e <- mean(s_e)
sd_p <- sd(s_p)
sd_e <- sd(s_e)
se <- sqrt((sd_p)^2 / 400 +(sd_e)^2 / 400)
t <- (mean_p - mean_e) / se
pt(t, 399)
pt(t, 400)
pwd()
zhlcb@DESKTOP-K68I1C5 MINGW64 ~/Desktop
setwd("C:/Users/zhlcb/OneDrive/Desktop/MATH 183_working directory")
# P1
prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
# P1
prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
# P1
prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
# P1
prop.test(x = c(0.9, 0.5), n = c(610, 724), conf.level = 0.85, correct = F)
5
# P1
prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
# R
runif(1, 0, 100)
# R
runif(100, 0, 100)
# R
h_scores <- runif(100, 0, 100)
sample <- sample(h_scores, 50, F, NULL)
sample
# R2
hist(sample)
# R2
hist(runif(50000, sample(h_scores, 50, F, NULL)))
# R2
hist(replicate(50000, sample(h_scores, 50, F, NULL)))
# R2
hist(replicate(50000, sample(h_scores, 50, F, NULL)))
# R2
hist(replicate(50000, sample(h_scores, 50, F, NULL)))
# R2
hist(replicate(50000, sample(h_scores, 50, F, NULL)))
mean(sample(h_scores, 50, F, NULL) > 99)
# R2
hist(replicate(50000, sample(h_scores, 50, F, NULL)))
# R1
h_scores <- runif(100, 0, 100)
mean(sample(h_scores, 50, F, NULL) > 99)
# R1
h_scores <- runif(100, 0, 100)
mean(sample(h_scores, 50, F, NULL) > 99)
# R1
h_scores <- runif(100, 0, 100)
mean(sample(h_scores, 50, F, NULL) > 99)
# R1
h_scores <- runif(100, 0, 100)
mean(sample(h_scores, 50, F, NULL) > 99)
# R1
h_scores <- runif(100, 0, 100)
mean(sample(h_scores, 50, F, NULL) > 99)
# R2
hist(replicate(50000, mean(sample(h_scores, 50, F, NULL) > 99)))
# R1
h_scores <- runif(100, 0, 100)
ai <- mean(sample(h_scores, 50, F, NULL) > 99)
# R1
h_scores <- runif(100, 0, 100)
ai <- mean(sample(h_scores, 50, F, NULL) > 99)
# R2
hist(replicate(50000, ai))
# R2
hist(replicate(50000, ai))
# R2
hist(replicate(50000, ai), ylim = 100)
# R2
hist(replicate(50000, ai), ylim = c(0, 100))
# R2
hist(replicate(50000, ai), ylim = c(0, 100))
# R2
hist(replicate(50000, ai), ylim = c(0, 100))
?sample
?kurtosis
??kurtosis
install.packages("moments")
?kurtosis
library(moments)
# R4
for (c in 1:99) {
samp_dis <- mean(sample(h_scores, 50, F, NULL) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis))
}
# R4
for (c in 1:99) {
samp_dis <- mean(sample(h_scores, 50, F, NULL) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
samp_dis <- mean(sample(h_scores, 50) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
samp_dis <- mean(sample(h_scores, 50) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis, F), "\n")
}
# R4
for (c in 1:99) {
mean(sample(h_scores, 50) > c)
# samp_dis <- mean(sample(h_scores, 50) > c)
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis, F), "\n")
}
??kurtosis
# R4
for (c in 1:99) {
mean(sample(h_scores, 50) > c)
# samp_dis <- mean(sample(h_scores, 50) > c)
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis, F), "\n")
}
# R4
for (c in 1:99) {
mean(sample(h_scores, 50, F, NULL) > c)
# samp_dis <- mean(sample(h_scores, 50) > c)
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis, F), "\n")
}
# R4
for (c in 1:99) {
print(mean(sample(h_scores, 50, F, NULL) > c))
# samp_dis <- mean(sample(h_scores, 50) > c)
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis, F), "\n")
}
?mean
# R2
hist(replicate(50000, sample(h_scores, 50, F, NULL)), ylim = c(0, 100))
# R2
hist(replicate(50000, sample(h_scores, 50, F, NULL)))
# R4
for (c in 1:99) {
# print(mean(sample(h_scores, 50, F, NULL) > c))
samp_dis <- mean(sample(h_scores, 50, F, NULL) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis, F), "\n")
}
# R4
for (c in 1:99) {
# print(mean(sample(h_scores, 50, F, NULL) > c))
samp_dis <- mean(sample(h_scores, 50, F, NULL) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
# print(mean(sample(h_scores, 50, F, NULL) > c))
samp_dis <- (sample(h_scores, 50, F, NULL) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
sample(h_scores, 50, F, NULL) > 99
sample$sample(h_scores, 50, F, NULL) > 99
sample$(sample(h_scores, 50, F, NULL) > 99)
subset(sample, sample > 99)
subset(sample, sample > 99)
# R1
h_scores <- runif(100, 0, 100)
sample <- sample(h_scores, 50, F, NULL)
subset(sample, sample > 99)
# R1
h_scores <- runif(100, 0, 100)
ai <- mean(sample(h_scores, 50, F, NULL) > 99)
sample <- sample(h_scores, 50, F, NULL)
subset(sample, sample > 99)
# R1
h_scores <- runif(100, 0, 100)
sample <- sample(h_scores, 50, F, NULL)
subset(sample, sample > 99)
??kurtosis
# R4
for (c in 1:99) {
# print(mean(sample(h_scores, 50, F, NULL) > c))
samp_dis <- sample(h_scores, 50, F, NULL)
samp_dis <- subset(samp_dis, samp_dis > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
# print(mean(sample(h_scores, 50, F, NULL) > c))
samp_dis <- sample(h_scores, 50, F, NULL)
samp_dis <- subset(samp_dis, samp_dis > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis, T), "\n")
}
# P1
# prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
prop.test(x = c(0.9, 0.5), n = c(610, 724), conf.level = 0.85, correct = F)
# P1
prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
# P1
prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
# P1
# prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
prop.test(x = c(0.9, 0.5), n = c(610, 724), conf.level = 0.85, correct = F)
# P1
# prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
prop.test(x = c(0.9, 0.5), n = c(724, 610), conf.level = 0.85, correct = F)
# P1
# prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
prop.test(x = c(0.9, 0.5), n = c(724, 610), conf.level = 0.85, correct = F)
# P1
# prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
prop.test(x = c(0.9, 0.5), n = c(610, 724), conf.level = 0.85, correct = F)
# P1
prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
# P1
# prop.test(x = c(0.5, 0.9), n = c(724, 610), conf.level = 0.85, correct = F)
prop.test(x = c(0.9*610, 0.5*724), n = c(610, 724), conf.level = 0.85, correct = F)
# P1
prop.test(x = c(0.5*724, 0.9*610), n = c(724, 610), conf.level = 0.85, correct = F)
source('~/Desktop/MATH 183_working directory/HW14.R', echo=TRUE)
install.packages("moments")
？runif
?runif
mean(runif(50, 0, 100))
mean(runif(50, 0, 100) > 99)
mean(runif(50, 0, 100) > 99)
mean(runif(50, 0, 100) > 99)
mean(runif(50, 0, 100) > 99)
# R1
ai <- mean(runif(50, 0, 100) > 99)
# R2
hist(replicate(50000, mean(runif(50, 0, 100) > 99)))
# R2
hist(replicate(50000, mean(runif(50, 0, 100) > 99)))
# R1
hist(mean(runif(50, 0, 100) > 99))
# R1
mean(runif(50, 0, 100) > 99)
# R2
hist(replicate(50000, mean(runif(50, 0, 100) > 99)))
# R4
for (c in 1:99) {
samp_dis <- mean(runif(50, 0, 100) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
library(moments)
# R4
for (c in 1:99) {
samp_dis <- mean(runif(50, 0, 100) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
samp_dis <- mean(runif(50, 0, 100) > c)
sample_dis
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
sample_dis <- mean(runif(50, 0, 100) > c)
sample_dis
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
mean(runif(50, 0, 100) > c)
# sample_dis
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
print(c)
# sample_dis <- mean(runif(50, 0, 100) > c)
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
??kurtosis
set.seed(1234)
kurtosis(rnorm(1000))
rnorm(1000)
# R4
for (c in 1:99) {
sample_dis <- mean(runif(50, 0, 100) > c)
kurtosis(sample_dis)
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(samp_dis), "\n")
}
# R4
for (c in 1:99) {
mean(runif(50, 0, 100) > c)
# sample_dis <- mean(runif(50, 0, 100) > c)
# kurtosis(sample_dis)
# cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(sample_dis), "\n")
}
# P1
prop.test(x = c(0.9*610, 0.5*724), n = c(610, 724), conf.level = 0.85, correct = F)
n <- 5
data <- c()
f <- function(n, data) {
for (i in 1:10000) {
avg <- mean(rexp(n, 1/20))
data <- c(data, avg)
}
plot(density(data),
main = paste("Average of", n, "random number in Exp(1/20)")
)
return(data)
}
data <- f(5, data)
data
kurtosis(mean(runif(50, 0, 100) > 10))
kurtosis(mean(runif(50, 0, 100) > 1))
kurtosis(runif(50, 0, 100) > 1)
# R4
for (c in 1:99) {
sample_dis <- (runif(50, 0, 100) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(sample_dis), "\n")
}
# R4
for (c in 1:99) {
sample_dis <- (runif(50, 0, 100) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(sample_dis), "\n")
}
for (c in 1:99) {
sample_dis <- (runif(50, 0, 100) > c)
cat("kurtosis for sampling distribution with c =", c, ":", kurtosis(sample_dis), "\n")
}
